
#include "Dependencies\glew\glew.h"
#include "Dependencies\freeglut\freeglut.h"

#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>

/*  Poor man's approximation of PI */
#define PI 3.1415926535898
/*  Degrees to radians */
#define DTOR (PI / 180.0f)
/*  Macro for sin & cos in degrees */
#define Cos(th) cos(PI/180*(th))
#define Sin(th) sin(PI/180*(th))

typedef struct {
	float x, y, z;
	DWORD color;
	float u, v;
} VERTEX;

typedef struct {
	float x, y, z, radius;
} SPHERE;

void display();
void reshape();

/*  Globals */
double dim = 1.0; /* dimension of orthogonal box */
char *windowName = "Royal Pavilion";
int windowWidth = 700;
int windowHeight = 650;
// Intervals between verticies.
int dtheta = 10;
int dphi = 10;
// The number of verticies which will fit on a sphere with dtheta and dphi
int NumVertices = (int)((360 / dtheta)*(90 / dphi) * 4);
VERTEX *Vertices = new VERTEX[NumVertices];
// The number of particles in the cloud
int NumParticles = 10000;
float size = 0.003;
SPHERE *Particles = new SPHERE[NumParticles];

// Variables to move the dome around the window
float xPlus = 0.0;
float yPlus = -0.8;
float zPlus = -0.3;

/*  Various global state */
int th = 0;   /* azimuth of view angle */
int ph = 255;   /* elevation of view angle */
int fov = 55; /* field of view for perspective */
int asp = 1;  /* aspect ratio */

			  /*  Cube vertices */
GLfloat vertA[3] = { 0.1, 0.1, 0.1 };
GLfloat vertB[3] = { -0.1, 0.1, 0.1 };
GLfloat vertC[3] = { -0.1,-0.1, 0.1 };
GLfloat vertD[3] = { 0.1,-0.1, 0.1 };
GLfloat vertE[3] = { 0.1, 0.1,-0.1 };
GLfloat vertF[3] = { -0.1, 0.1,-0.1 };
GLfloat vertG[3] = { -0.1,-0.1,-0.1 };
GLfloat vertH[3] = { 0.1,-0.1,-0.1 };

/*
* project()
* ------
* Sets the projection
*/
void project()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	/* perspective */
	gluPerspective(fov, asp, dim, 4 * dim);
	

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void generateDome() {
	int theta, phi;
	float radius = 1;

	int n = 0;	// Iterator through the list of verticies.
	float vx, vy, vz, mag;
	float hTile = 1;
	float vTile = 1;

	// Fill vertices
	for (phi = 0; phi <= 90 - dphi; phi += (int)dphi) {
		for (theta = 0; theta <= 360 - dtheta; theta += (int)dtheta) {
			// Calculate the vector at phi, theta
			Vertices[n].x = radius * sinf(phi*DTOR) * cosf(DTOR*theta);
			Vertices[n].y = radius * sinf(phi*DTOR) * sinf(DTOR*theta);
			Vertices[n].z = radius * cosf(phi*DTOR);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			// Calculate the vector at phi+dphi, theta
			Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(theta*DTOR);
			Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(theta*DTOR);
			Vertices[n].z = radius * cosf((phi + dphi)*DTOR);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			// Calculate the vector at phi, theta+dtheta
			Vertices[n].x = radius * sinf(DTOR*phi) * cosf(DTOR*(theta + dtheta));
			Vertices[n].y = radius * sinf(DTOR*phi) * sinf(DTOR*(theta + dtheta));
			Vertices[n].z = radius * cosf(DTOR*phi);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			if (phi > -90 && phi < 90) {
				// Calculate the vector at phi+dphi, theta+dtheta
				Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(DTOR*(theta + dtheta));
				Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(DTOR*(theta + dtheta));
				Vertices[n].z = radius * cosf((phi + dphi)*DTOR);
				// Find the vector from the origin to this point
				vx = Vertices[n].x;
				vy = Vertices[n].y;
				vz = Vertices[n].z;
				// Normalise the vector
				mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
				vx /= mag;
				vy /= mag;
				vz /= mag;
				// Calculate the spherical texture coordinates.
				Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
				Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
				n++;
			}

			for (int i = 0; i < NumVertices - 3; i++) {
				if (Vertices[i].u - Vertices[i + 1].u > 0.9f)
					Vertices[i + 1].u += 1.0f;
				if (Vertices[i + 1].u - Vertices[i].u > 0.9f)
					Vertices[i].u += 1.0f;
				if (Vertices[i].u - Vertices[i + 2].u > 0.9f)
					Vertices[i + 2].u += 1.0f;
				if (Vertices[i + 2].u - Vertices[i].u > 0.9f)
					Vertices[i].u += 1.0f;
				if (Vertices[i + 1].u - Vertices[i + 2].u > 0.9f)
					Vertices[i + 2].u += 1.0f;
				if (Vertices[i + 2].u - Vertices[i + 1].u > 0.9f)
					Vertices[i + 1].u += 1.0f;
				if (Vertices[i].v - Vertices[i + 1].v > 0.8f)
					Vertices[i + 1].v += 1.0f;
				if (Vertices[i + 1].v - Vertices[i].v > 0.8f)
					Vertices[i].v += 1.0f;
				if (Vertices[i].v - Vertices[i + 2].v > 0.8f)
					Vertices[i + 2].v += 1.0f;
				if (Vertices[i + 2].v - Vertices[i].v > 0.8f)
					Vertices[i].v += 1.0f;
				if (Vertices[i + 1].v - Vertices[i + 2].v > 0.8f)
					Vertices[i + 2].v += 1.0f;
				if (Vertices[i + 2].v - Vertices[i + 1].v > 0.8f)
					Vertices[i + 1].v += 1.0f;
			}
		}
	}
}


void generateCloud() {
	srand(time(NULL));

	for (int i = 0; i < NumParticles; i++) {
		Particles[i].radius = size;
		Particles[i].x = -0.2 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (0.2 - -0.2)));
		Particles[i].y = -0.8 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (-0.2 - -0.8)));
		Particles[i].z = 0 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (0.5 - 0)));
	}


}

/*
*  drawShape()
*  ------
*  Draw the GLUT shape
*/
void drawDome() {
	generateDome();

	// Outer Dome
	glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i < NumVertices; i++) {
		glColor3f(1.0, 1.0, 1.0);
		glTexCoord2f(Vertices[i].u, Vertices[i].v);
		glVertex3f(Vertices[i].x + xPlus, Vertices[i].y + yPlus, Vertices[i].z + zPlus + 0.01);
	}
	glEnd();

	// Inner Dome
	glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i < NumVertices; i++) {
		// Colour depending on angle from horizon
		if (Vertices[i].z < 0.10) glColor3f(0.6, 0.6, 0.8);
		else if (Vertices[i].z < 0.2) glColor3f(0.5, 0.5, 0.78);
		else if (Vertices[i].z < 0.4) glColor3f(0.3, 0.3, 0.76);
		else if (Vertices[i].z < 0.7) glColor3f(0.2, 0.2, 0.74);
		else glColor3f(0.15, 0.15, 0.72);
		glTexCoord2f(Vertices[i].u, Vertices[i].v);
		glVertex3f(Vertices[i].x + xPlus, Vertices[i].y + yPlus, Vertices[i].z + zPlus);
	}
	glEnd();
	
	// Cube for testing
	/*
	glBegin(GL_QUADS);
	glColor3f(0.6, 0.3, 0.3);
	glVertex3fv(vertA);
	glVertex3fv(vertB);
	glVertex3fv(vertC);
	glVertex3fv(vertD);

	glColor3f(0.55, 0.35, 0.3);
	glVertex3fv(vertF);
	glVertex3fv(vertE);
	glVertex3fv(vertH);
	glVertex3fv(vertG);

	glColor3f(0.5, 0.4, 0.3);
	glVertex3fv(vertE);
	glVertex3fv(vertA);
	glVertex3fv(vertD);
	glVertex3fv(vertH);

	glColor3f(0.45, 0.45, 0.3);
	glVertex3fv(vertB);
	glVertex3fv(vertF);
	glVertex3fv(vertG);
	glVertex3fv(vertC);

	glColor3f(0.4, 0.5, 0.3);
	glVertex3fv(vertE);
	glVertex3fv(vertF);
	glVertex3fv(vertB);
	glVertex3fv(vertA);

	glColor3f(0.35, 0.55, 0.3);
	glVertex3fv(vertD);
	glVertex3fv(vertC);
	glVertex3fv(vertG);
	glVertex3fv(vertH);
	glEnd();*/
}

void drawCloud() {
	generateCloud();
	glColor3f(1, 1, 1);
	glMatrixMode(GL_MODELVIEW);
	for (int i = 0; i < NumParticles; i++) {
		glPushMatrix(); //remember current matrix
		glTranslatef(Particles[i].x, Particles[i].y, Particles[i].z);
		gluSphere(gluNewQuadric(), Particles[i].radius, 10, 10);
		glPopMatrix(); //restore matrix
	}
}

/*
*  display()
*  ------
*  Display the scene
*/
void display() {
	/*  Clear the image */
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	/*  Enable Z-buffering in OpenGL */
	glEnable(GL_DEPTH_TEST);

	/*  Reset previous transforms */
	glLoadIdentity();

	/*  Perspective - set eye position */
	double Ex = -2 * dim*Sin(th)*Cos(ph);
	double Ey = +2 * dim        *Sin(ph);
	double Ez = +2 * dim*Cos(th)*Cos(ph);
	/* camera/eye position, aim of camera lens, up-vector*/ 
	gluLookAt(Ex, Ey, Ez, 0, 0, 0, 0, Cos(ph), 0);
	

	/*  Draw  */
	drawDome();
	drawCloud();

	/*  Flush and swap */
	glFlush();
	glutSwapBuffers();
}

/*
*  reshape()
*  ------
*  GLUT calls this routine when the window is resized
*/
void reshape(int width, int height) {
	asp = (height>0) ? (double)width / height : 1;
	glViewport(0, 0, width, height);
	project();
}

/*
*  windowKey()
*  ------
*  GLUT calls this routine when a non-special key is pressed
*/
void windowKey(unsigned char key, int x, int y) {
	/*  Exit on ESC */
	if (key == 27) exit(0);
	/*  Change field of view angle */
	else if (key == '-' && key>1) fov--;
	else if (key == '+' && key<179) fov++;
	/*  Change dimensions */
	else if (key == 'P') dim += 0.1;
	else if (key == 'p' && dim>1) dim -= 0.1;

	project();
	glutPostRedisplay();
}

/*
*  windowSpecial()
*  ------
*  GLUT calls this routine when an arrow key is pressed
*/
void windowSpecial(int key, int x, int y)
{
	/*  Right arrow key - increase azimuth by 5 degrees */
	if (key == GLUT_KEY_RIGHT) th += 5;
	/*  Left arrow key - decrease azimuth by 5 degrees */
	else if (key == GLUT_KEY_LEFT) th -= 5;
	/*  Up arrow key - increase elevation by 5 degrees */
	else if (key == GLUT_KEY_UP) ph += 5;
	/*  Down arrow key - decrease elevation by 5 degrees */
	else if (key == GLUT_KEY_DOWN) ph -= 5;
	else if (key == GLUT_KEY_HOME) {
		ph = 255;
		th = 0;
	}

	/*  Keep angles to +/-360 degrees */
	th %= 360;
	ph %= 360;
	
	project();
	glutPostRedisplay();
}

/*
*  windowMenu
*  ------
*  Window menu is the same as the keyboard clicks
*/
void windowMenu(int value)
{
	windowKey((unsigned char)value, 0, 0);
}

/*
*  main()
*  ----
*  Start up GLUT and tell it what to do
*/
int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(windowWidth, windowHeight);
	glutCreateWindow(windowName);
	//glutFullScreen();

	glutPostRedisplay();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(windowKey);

	glutPostRedisplay();
	glutSpecialFunc(windowSpecial);
	glutPostRedisplay();

	glutCreateMenu(windowMenu);
	glutAddMenuEntry("Toggle Mode [m]", 'm');
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glutMainLoop();
	return 0;
}









/*
#include <iostream>
#include <cmath>
#include <math.h>

#define PI 3.1415926535897f
#define DTOR (PI / 180.0f) //DegreesToRadians

typedef struct {
	float x, y, z;
	DWORD color;
	float u, v;
} VERTEX;

void render(void);
void fillVertices(void);

VERTEX *Vertices;

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 50);//optional
	glutInitWindowSize(800, 600); //optional
	glutCreateWindow("Clouds");

	glutDisplayFunc(render);

	glutMainLoop();
}

void fillVertices(void) {

	
}

void render(void) {
	
	int theta, phi;
	float radius = 1;

	// Intervals between verticies.
	int dtheta = 15;
	int dphi = 15;
	// The number of verticies which will fit on a sphere with dtheta and dphi
	int NumVertices = (int)((360 / dtheta)*(90 / dphi) * 4);

	// The list of vertices
	Vertices = new VERTEX[NumVertices];

	int n = 0;	// Iterator through the list of verticies.
	float vx, vy, vz, mag;
	float hTile = 1;
	float vTile = 1;

	for (phi = 0; phi <= 90 - dphi; phi += (int)dphi) {
		for (theta = 0; theta <= 360 - dtheta; theta += (int)dtheta) {
			// Calculate the vector at phi, theta
			Vertices[n].x = radius * sinf(phi*DTOR) * cosf(DTOR*theta);
			Vertices[n].y = radius * sinf(phi*DTOR) * sinf(DTOR*theta);
			Vertices[n].z = radius * cosf(phi*DTOR);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			// Calculate the vector at phi+dphi, theta
			Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(theta*DTOR);
			Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(theta*DTOR);
			Vertices[n].z = radius * cosf((phi + dphi)*DTOR);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			// Calculate the vector at phi, theta+dtheta
			Vertices[n].x = radius * sinf(DTOR*phi) * cosf(DTOR*(theta + dtheta));
			Vertices[n].y = radius * sinf(DTOR*phi) * sinf(DTOR*(theta + dtheta));
			Vertices[n].z = radius * cosf(DTOR*phi);
			// Find the vector from the origin to this point
			vx = Vertices[n].x;
			vy = Vertices[n].y;
			vz = Vertices[n].z;
			// Normalise the vector
			mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
			vx /= mag;
			vy /= mag;
			vz /= mag;
			// Calculate the spherical texture coordinates.
			Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
			Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
			n++;

			if (phi > -90 && phi < 90) {
				// Calculate the vector at phi+dphi, theta+dtheta
				Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(DTOR*(theta + dtheta));
				Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(DTOR*(theta + dtheta));
				Vertices[n].z = radius * cosf((phi + dphi)*DTOR);
				// Find the vector from the origin to this point
				vx = Vertices[n].x;
				vy = Vertices[n].y;
				vz = Vertices[n].z;
				// Normalise the vector
				mag = (float)sqrt((vx)*(vx)+(vy)*(vy)+(vz)*(vz));
				vx /= mag;
				vy /= mag;
				vz /= mag;
				// Calculate the spherical texture coordinates.
				Vertices[n].u = hTile * (float)(atan2(vx, vz) / (PI * 2)) + 0.5f;
				Vertices[n].v = vTile * (float)(asin(vy) / PI) + 0.5f;
				n++;
			}
			
			for (int i = 0; i < NumVertices - 3; i++) {
				if (Vertices[i].u - Vertices[i + 1].u > 0.9f)
					Vertices[i + 1].u += 1.0f;
				if (Vertices[i + 1].u - Vertices[i].u > 0.9f)
					Vertices[i].u += 1.0f;
				if (Vertices[i].u - Vertices[i + 2].u > 0.9f)
					Vertices[i + 2].u += 1.0f;
				if (Vertices[i + 2].u - Vertices[i].u > 0.9f)
					Vertices[i].u += 1.0f;
				if (Vertices[i + 1].u - Vertices[i + 2].u > 0.9f)
					Vertices[i + 2].u += 1.0f;
				if (Vertices[i + 2].u - Vertices[i + 1].u > 0.9f)
					Vertices[i + 1].u += 1.0f;
				if (Vertices[i].v - Vertices[i + 1].v > 0.8f)
					Vertices[i + 1].v += 1.0f;
				if (Vertices[i + 1].v - Vertices[i].v > 0.8f)
					Vertices[i].v += 1.0f;
				if (Vertices[i].v - Vertices[i + 2].v > 0.8f)
					Vertices[i + 2].v += 1.0f;
				if (Vertices[i + 2].v - Vertices[i].v > 0.8f)
					Vertices[i].v += 1.0f;
				if (Vertices[i + 1].v - Vertices[i + 2].v > 0.8f)
					Vertices[i + 2].v += 1.0f;
				if (Vertices[i + 2].v - Vertices[i + 1].v > 0.8f)
					Vertices[i + 1].v += 1.0f;
			}
		}
	}

	for (int i = 0; i < NumVertices; i++) {
		int y = Vertices[i].y;
		Vertices[i].y = Vertices[i].z - 0.5;
		Vertices[i].z = y;
	}

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();


	

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

		gluPerspective(55.0, 0.0, 3 / 4, 4 * 3);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();


	//gluPerspective(55.0, 0.0, 7.0, 8.0);
	/*
	glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i < NumVertices; i++)
	{
		glColor3f(0.5, 0.5, 1.0);
		glTexCoord2f(Vertices[i].u, Vertices[i].v);
		glColor3f(0, 0, 1);
		glVertex3f(Vertices[i].x, Vertices[i].y, Vertices[i].z);
	}
	glEnd();


	GLfloat vertA[3] = { 0.5, 0.5, 0.5 };
	GLfloat vertB[3] = { -0.5, 0.5, 0.5 };
	GLfloat vertC[3] = { -0.5,-0.5, 0.5 };
	GLfloat vertD[3] = { 0.5,-0.5, 0.5 };
	GLfloat vertE[3] = { 0.5, 0.5,-0.5 };
	GLfloat vertF[3] = { -0.5, 0.5,-0.5 };
	GLfloat vertG[3] = { -0.5,-0.5,-0.5 };
	GLfloat vertH[3] = { 0.5,-0.5,-0.5 };
	
	glBegin(GL_QUADS);
	glVertex3fv(vertA);
	glVertex3fv(vertB);
	glVertex3fv(vertC);
	glVertex3fv(vertD);

	glVertex3fv(vertF);
	glVertex3fv(vertE);
	glVertex3fv(vertH);
	glVertex3fv(vertG);

	glVertex3fv(vertE);
	glVertex3fv(vertA);
	glVertex3fv(vertD);
	glVertex3fv(vertH);

	glVertex3fv(vertB);
	glVertex3fv(vertF);
	glVertex3fv(vertG);
	glVertex3fv(vertC);

	glVertex3fv(vertE);
	glVertex3fv(vertF);
	glVertex3fv(vertB);
	glVertex3fv(vertA);

	glVertex3fv(vertD);
	glVertex3fv(vertC);
	glVertex3fv(vertG);
	glVertex3fv(vertH);
	glEnd();


	

	glutSwapBuffers();
}
/*
#include "Dependencies\glew\glew.h"
#include "Dependencies\freeglut\freeglut.h"
#include <iostream>

void render(void);

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 50);//optional
	glutInitWindowSize(640, 480); //optional
	glutCreateWindow("Royal Pavillion");

	glutDisplayFunc(render);

	glutMainLoop();
}

void render(void) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glBegin(GL_TRIANGLES);
		glColor3f(1, 0, 0);
		glVertex3f(-0.5, -0.5, 0.5);
		glVertex3f(-0.5, 0.5, 0.5);
		glVertex3f(0.5, 0.5, 0.5);
	glEnd();

	
	glBegin(GL_TRIANGLES);
		glColor3f(1, 1, 1);
		glVertex3f(0.5, 0.5, -0.5);
		glVertex3f(0.5, -0.5, 0.5);
		glVertex3f(-0.5, -0.5, 0.5);
	glEnd();


	glutSwapBuffers();
}*/