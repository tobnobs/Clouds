
#include "Dependencies\glew\glew.h"
#include "Dependencies\freeglut\freeglut.h"
#include "Dependencies\matrix\src\Matrices.h"
#include "Dependencies\matrix\src\Vectors.h"

#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>

/*  Poor man's approximation of PI */
#define PI 3.1415926535898
/*  Degrees to radians */
#define DTOR (PI / 180.0f)
/*  Macro for sin & cos in degrees */
#define Cos(th) cos(PI/180*(th))
#define Sin(th) sin(PI/180*(th))

// WINDOW PROPERTIES
double dim = 1.0; /* dimension of orthogonal box */
char *windowName = "Royal Pavilion";
int windowWidth = 1200;
int windowHeight = 600;

// DOME PROPERTIES
// Intervals between verticies.
int dtheta = 10;
int dphi = 10;
// The number of verticies which will fit on a sphere with dtheta and dphi
int NumVertices = (int)((360 / dtheta)*(90 / dphi) * 4);

// CLOUD PROPERTIES
// The number of particles in the cloud
int NumParticles = 50000;
bool cloudGen = false;
bool domeGen = false;

// TOTAL VERTICES
int numPoints = NumVertices + NumParticles;
Vector4* Vertices = new Vector4[numPoints];

// Variables to move the display around
float xPlus = 0.0;
float yPlus = -0.8;
float zPlus = -0.3;

/*  Various global state */
int th = 1;   /* azimuth of view angle */
int ph = 1;   /* elevation of view angle */
int fov = 55; /* field of view for perspective */
int asp = 2;  /* aspect ratio */

/*
* project()
* ------
* Sets the projection
*/
void project()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	/* perspective */
	gluPerspective(fov, asp, 0.1, 4 * dim);
	

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void generateDome() {
	for (int i = 0; i < numPoints; i++) Vertices[i].w = 1;

	int theta, phi;
	float radius = 1.0;

	int n = 0;	// Iterator through the list of verticies.
	float vx, vy, vz, mag;
	float hTile = 1;
	float vTile = 1;

	// Fill vertices
	for (phi = 0; phi <= 90 - dphi; phi += (int)dphi) {
		for (theta = 0; theta <= 360 - dtheta; theta += (int)dtheta) {
			// Calculate the vector at phi, theta
			Vertices[n].x = radius * sinf(phi*DTOR) * cosf(DTOR*theta);
			Vertices[n].y = radius * sinf(phi*DTOR) * sinf(DTOR*theta);
			Vertices[n].z = radius * cosf(phi*DTOR);

			n++;

			// Calculate the vector at phi+dphi, theta
			Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(theta*DTOR);
			Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(theta*DTOR);
			Vertices[n].z = radius * cosf((phi + dphi)*DTOR);

			n++;

			// Calculate the vector at phi, theta+dtheta
			Vertices[n].x = radius * sinf(DTOR*phi) * cosf(DTOR*(theta + dtheta));
			Vertices[n].y = radius * sinf(DTOR*phi) * sinf(DTOR*(theta + dtheta));
			Vertices[n].z = radius * cosf(DTOR*phi);

			n++;

			if (phi > -90 && phi < 90) {
				// Calculate the vector at phi+dphi, theta+dtheta
				Vertices[n].x = radius * sinf((phi + dphi)*DTOR) * cosf(DTOR*(theta + dtheta));
				Vertices[n].y = radius * sinf((phi + dphi)*DTOR) * sinf(DTOR*(theta + dtheta));
				Vertices[n].z = radius * cosf((phi + dphi)*DTOR);

				n++;
			}
			if (n > NumVertices) {
				std::cout << "Error: too many dome points \n";
			}
		}
	}
	domeGen = true;
}

void generateCloud() {
	srand(time(NULL));

	for (int i = NumVertices; i < numPoints; i++) {
		Vertices[i].x = -0.2 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (0.2 - -0.2)));
		Vertices[i].y = -0.8 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (-0.2 - -0.8)));
		Vertices[i].z = 0 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (0.2 - 0)));
	}

	cloudGen = true;
}

void drawDome() {
	if (!domeGen) generateDome();

	// Outer Dome
	glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i < NumVertices; i++) {
		glColor3f(1.0, 1.0, 1.0);
		glVertex3f(Vertices[i].x, Vertices[i].y, Vertices[i].z + 0.01);
	}
	glEnd();

	// Inner Dome
	glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i < NumVertices; i++) {
		// Colour depending on angle from horizon
		if (Vertices[i].z < 0.10) glColor3f(0.6, 0.6, 0.8);
		else if (Vertices[i].z < 0.2) glColor3f(0.5, 0.5, 0.78);
		else if (Vertices[i].z < 0.4) glColor3f(0.3, 0.3, 0.76);
		else if (Vertices[i].z < 0.7) glColor3f(0.2, 0.2, 0.74);
		else glColor3f(0.15, 0.15, 0.72);
		glVertex3f(Vertices[i].x, Vertices[i].y, Vertices[i].z);
	}
	glEnd();
}

void drawCloud() {
	if (!cloudGen) generateCloud();

	glColor3f(1, 1, 1);
	glBegin(GL_POINTS);
	for (int i = NumVertices; i < numPoints; i++) {
		glVertex3f(Vertices[i].x, Vertices[i].y, Vertices[i].z);
	}
	glEnd();
}

/*
*  reshape()
*  ------
*  GLUT calls this routine when the window is resized
*/
void reshape(int width, int height) {
	asp = (height>0) ? (double)width / height : 1;
	glViewport(0, 0, width, height);
	project();
}

void keyPress(unsigned char key, int x, int y) {

	// Exit on ESC 
	if (key == 27) exit(0);
	// Change field of view angle 
	else if (key == '-' && key>1) fov--;
	else if (key == '+' && key<179) fov++;
	// Change dimensions 
	else if (key == 'P') dim += 0.1;
	else if (key == 'p' && dim>1) dim -= 0.1;
	// Change coordinates
	else if (key == 'q') xPlus += 0.01;
	else if (key == 'a') xPlus -= 0.01;
	else if (key == 'w') yPlus += 0.01;
	else if (key == 's') yPlus -= 0.01;
	else if (key == 'd') zPlus += 0.01;
	else if (key == 'e') zPlus -= 0.01;

	project();
	glutPostRedisplay();
}

/*
*  windowSpecial()
*  ------
*  GLUT calls this routine when an arrow key is pressed
*/
void windowSpecial(int key, int x, int y) {
	/*  Right arrow key - increase azimuth by 1 degree */
	if (key == GLUT_KEY_RIGHT) th += 1;
	/*  Left arrow key - decrease azimuth by 1 degree */
	else if (key == GLUT_KEY_LEFT) th -= 1;
	/*  Up arrow key - increase elevation by 1 degree */
	else if (key == GLUT_KEY_UP) ph += 1;
	/*  Down arrow key - decrease elevation by 1 degree */
	else if (key == GLUT_KEY_DOWN) ph -= 1;
	else if (key == GLUT_KEY_HOME) {
		ph = 255;
		th = 0;
	}

	//  Keep angles to +/-360 degrees
	th %= 360;
	ph %= 360;
	
	project();
	glutPostRedisplay();
}

/*
*  windowMenu
*  ------
*  Window menu is the same as the keyboard clicks
*/
void windowMenu(int value)
{
	keyPress((unsigned char)value, 0, 0);
}

/*
*  display()
*  ------
*  Display the scene
*/
void display() {
	/*  Clear the image */
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	/*  Enable Z-buffering in OpenGL */
	glEnable(GL_DEPTH_TEST);

	// Reset previous transforms
	glLoadIdentity();

	// POSITIONING
	// Coordinates
	glTranslatef(xPlus, yPlus, zPlus);
	// Rotation
	glRotatef(th, 0.0, 1.0, 0.0);
	glRotatef(ph, 1.0, 0.0, 0.0);

	// Draw
	drawDome();
	drawCloud();

	/*  Flush and swap */
	glFlush();
	glutSwapBuffers();
}

/*
*  main()
*  ----
*  Start up GLUT and tell it what to do
*/
int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(windowWidth, windowHeight);
	glutCreateWindow(windowName);
	//glutFullScreen();

	glutPostRedisplay();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutKeyboardFunc(keyPress);
	glutPostRedisplay();
	glutSpecialFunc(windowSpecial);
	glutPostRedisplay();

	glutCreateMenu(windowMenu);
	glutAddMenuEntry("Toggle Mode [m]", 'm');
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glutMainLoop();
	return 0;
}