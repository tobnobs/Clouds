#include "Dependencies\glew\glew.h"
#include "Dependencies\freeglut\freeglut.h"
#include "Dependencies\matrix\src\Matrices.h"
#include "Dependencies\matrix\src\Vectors.h"
#include "Builder.h"

#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>

// Poor man's approximation of PI
#define PI 3.1415926535898
// Degrees to radians
#define DTOR (PI / 180.0f)

using namespace std;

// WINDOW PROPERTIES
double dim = 1.0; // dimension of orthogonal box
char windowName[] = "Clouds";
int windowWidth = 1200;
int windowHeight = 600;

// Variables to move the display around
float xPlus = 0.0;
float yPlus = 0.0;
float zPlus = -2.0;

//  Various global state
int lr = 0;   // azimuth of view angle
int ud = 0; // elevation of view angle
int fov = 55; // field of view for perspective
int asp = 2;  // aspect ratio


// INPUTS
const int numMetas = 300;
float density = 0.05;
float timelight = 20.50;


bool cloudGen = true;
int observerPosi = 1;
Vector3* centresMain = new Vector3[numMetas];
float radMax = ((float)numMetas/4000);
float* radius = new float[numMetas];


void project()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// perspective
	gluPerspective(fov, asp, dim / 4, 14 * dim);

	// orthoganal projection
	//glOrtho(-dim*asp, +dim*asp, -dim, +dim, 0, 10*dim);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
void reshape(int width, int height) {
	asp = (height>0) ? (double)width / height : 1;
	glViewport(0, 0, width, height);
	project();
}

void keyPress(unsigned char key, int x, int y) {
	// Exit on ESC 
	if (key == 27) exit(0);
	// Change field of view angle 
	else if (key == '-' && key>1) fov--;
	else if (key == '+' && key<179) fov++;
	// Change dimensions 
	else if (key == 'P') dim += 0.1;
	else if (key == 'p' && dim>1) dim -= 0.1;
	// Change coordinates
	else if (key == 'q') xPlus += 0.01;
	else if (key == 'a') xPlus -= 0.01;
	else if (key == 'w') yPlus += 0.01;
	else if (key == 's') yPlus -= 0.01;
	else if (key == 'd') zPlus += 0.01;
	else if (key == 'e') zPlus -= 0.01;

	project();
	glutPostRedisplay();
}
void windowSpecial(int key, int x, int y) {
	// Right arrow key - increase azimuth by 1 degree
	if (key == GLUT_KEY_RIGHT) lr += 1;
	// Left arrow key - decrease azimuth by 1 degree
	else if (key == GLUT_KEY_LEFT) lr -= 1;
	// Up arrow key - increase elevation by 1 degree
	else if (key == GLUT_KEY_UP) ud += 1;
	// Down arrow key - decrease elevation by 1 degree
	else if (key == GLUT_KEY_DOWN) ud -= 1;
	// Home key - return the objects to their initial position
	else if (key == GLUT_KEY_HOME) {
		ud = 240;
		lr = 0; 
		xPlus = 0.0;
		yPlus = -1.0;
		zPlus = -4.0;
	}

	//  Keep angles to +/-360 degrees
	lr %= 360;
	ud %= 360;
	
	project();
	glutPostRedisplay();
}

void windowMenu(int value) {
	keyPress((unsigned char)value, 0, 0);
}

Vector3 randomCentre(float xRange, float yRange, float zRange) {
	return Vector3{ -xRange / 2 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (xRange / 2 - -xRange / 2))),
		-yRange / 2 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / (yRange / 2 - -yRange / 2))),
		static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / zRange)) };
}

void display() {
	//  Clear the image
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
	//  Enable Z-buffering in OpenGL
	glEnable(GL_DEPTH_TEST);

	// Reset previous transforms
	glLoadIdentity();

	// POSITIONING
	// Coordinates
	glTranslatef(xPlus, yPlus, zPlus);
	// Rotation
	glRotatef(240, 1.0, 0.0, 0.0);
	//glRotatef(lr, 0.0, 1.0, 0.0);
	//glRotatef(ud, 1.0, 0.0, 0.0);

	if (cloudGen) {
		for (int i = 0; i < numMetas; i++) {
			centresMain[i] = randomCentre(1.5f, 1.5f, 0.5f);
			radius[i] = radMax + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX / radMax));
		}
		cloudGen = false;
	}

	Vector3 observer = { 0.0f, (float)sin(DTOR * 240), (float)cos(DTOR * 240) };
	Vector3 lightSource = { 1.0f, 0.0f, 6.5f }; // 0.0f, 30.0f};
	Vector3 lightcolour = { 1.0f, 1.0f, 1.0f };
	Builder build = Builder(centresMain, numMetas, radius, timelight, observer, density);
	
	//  Flush and swap
	glFlush();
	glutSwapBuffers();
}

int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(windowWidth, windowHeight);
	glutCreateWindow(windowName);
	//glutFullScreen();

	glutPostRedisplay();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutKeyboardFunc(keyPress);
	glutPostRedisplay();
	glutSpecialFunc(windowSpecial);
	glutPostRedisplay();

	glutCreateMenu(windowMenu);
	glutAddMenuEntry("Toggle Mode [m]", 'm');
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glutMainLoop();
	return 0;
}