#include "Radiometry.h"

#include "Dependencies\glew\glew.h"
#include "Dependencies\freeglut\freeglut.h"
#include "Dependencies\matrix\src\Matrices.h"
#include "Dependencies\matrix\src\Vectors.h"
#include <boost\shared_ptr.hpp>

/*#include <boost\numeric\odeint.hpp>
#include <boost\numeric\odeint\integrate\check_adapter.hpp>
#include <boost\numeric\odeint\integrate\integrate_n_steps.hpp>*/


// Poor man's approximation of PI
#define PI 3.1415926535898
// Degrees to radians
#define DTOR (PI / 180.0f)

//using namespace boost::numeric::odeint;

Radiometry::Radiometry() {
	
}

float Radiometry::phaseFunction(float angle, float g) {
	return ((3 * (1 - g*g)) / (2 * (2 + g*g)))
		* ((1 + cosf(angle*angle)) / std::powf((1 + g*g - 2 * g*cos(angle)), 3 / 2));
}

void Radiometry::calcTransmittance(float thickness, float density, float q, float r) {
	float area = PI * r * r;
	float ecs = q * area;
	float ks = density * ecs;
}

void Radiometry::lightTrans(float l, float t, float ks) {
	//g(s) = Ks S P(x,w,w) L(x(s),w) dw
	//g = integrate_n_steps();
}

float Radiometry::colour(float thickness, float pointRad) {
	
	
	return 0.0f;
}

Radiometry::~Radiometry()
{
}
